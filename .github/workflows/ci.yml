name: VCPKG Continuous Integration

on:
  # Run this workflow once every 6 hours against the master branch
  #schedule:
  # - cron: "0 */6 * * *"

  push:
    branches:
      - 'master'

    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  start-runner:
    if: github.event.workflow_run.conclusion == 'success' 
    name: Start self-hosted EC2 runner (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ec2:
          - { ami: ami-0610b26d76319237e, instance-type: m6i.8xlarge}
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.ACCESS_TOKEN }}
          ec2-image-id: ${{ matrix.ec2.ami }}
          ec2-instance-type: ${{ matrix.ec2.instance-type }}
          subnet-id: subnet-0deb935f0bbfe1a5d
          security-group-id: sg-0f6a02eb80fafb982
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]
  do-the-job:
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: 'ubuntu', tag: '20.04' }
        llvm: [
          '14'
          ]

    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    container:
      image: docker.pkg.github.com/lifting-bits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Adding github workspace as safe directory
        # See issue https://github.com/actions/checkout/issues/760
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Install utility tools
        shell: bash
        run: |
          # TODO some of these should probably live in the Docker build image
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" >> /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" >> /etc/apt/sources.list
          apt-get update
          apt-get install -y pixz xz-utils make rpm python3.8
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 100

      - name: Build with build script
        shell: bash
        run: |
          ./scripts/build.sh --download-dir "$(pwd)/../pre-built-llvm-${{ matrix.llvm }}" --llvm-version ${{ matrix.llvm }}
          cmake --build rellic-build --target install

      - name: Tests
        shell: bash
        working-directory: rellic-build
        run: |
          # Test with CMake provided test
          env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test

      - name: Build with CMake Presets
        shell: bash
        run: |
          export VCPKG_ROOT=${GITHUB_WORKSPACE}/${VCPKG_ROOT_PART}
          export INSTALL_DIR=${GITHUB_WORKSPACE}/${INSTALL_DIR_PART}
          scripts/build-preset.sh debug
        env:
          VCPKG_ROOT_PART: ../pre-built-llvm-${{ matrix.llvm }}/vcpkg_${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm-${{ matrix.llvm }}_amd64
          INSTALL_DIR_PART: ../rellic-install

      - name: Locate the packages
        id: package_names
        shell: bash
        working-directory: rellic-build
        run: |
          echo ::set-output name=DEB_PACKAGE_PATH::rellic-build/$(ls *.deb)
          echo ::set-output name=RPM_PACKAGE_PATH::rellic-build/$(ls *.rpm)
          echo ::set-output name=TGZ_PACKAGE_PATH::rellic-build/$(ls *.tar.gz)

      - name: Install the DEB package
        run: |
          dpkg -i ${{ steps.package_names.outputs.DEB_PACKAGE_PATH }}

      - name: Test the DEB package
        run: |
          rellic-decomp --version

      - name: Run Integration Tests (AnghaBench 1K, LLVM 14)
        if: ${{ matrix.llvm == '14' && matrix.image.tag == '20.04' }}
        shell: bash
        run: |
          apt-get install -y clang-${{ matrix.llvm }}
          python3 -m pip install -r external/lifting-tools-ci/requirements.txt
          scripts/test-angha-1k.sh \
            --rellic-cmd "rellic-decomp"

      - name: Store the DEB package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_deb_package
          path: ${{ steps.package_names.outputs.DEB_PACKAGE_PATH }}

      - name: Store the RPM package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_rpm_package
          path: ${{ steps.package_names.outputs.RPM_PACKAGE_PATH }}

      - name: Store the TGZ package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_tgz_package
          path: ${{ steps.package_names.outputs.TGZ_PACKAGE_PATH }}

  stop-runner:
    name: Stop self-hosted EC2 runner (Linux)
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  build_mac:
    strategy:
      fail-fast: false
      matrix:
        os: [
          'macos-11'
          ]
        llvm: [
          '14'
          ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Adding github workspace as safe directory
        # See issue https://github.com/actions/checkout/issues/760
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Build with build script
        shell: bash
        run: |
          ./scripts/build.sh --download-dir "$(pwd)/../pre-built-llvm-${{ matrix.llvm }}" --llvm-version ${{ matrix.llvm }}
          cmake --build rellic-build --target install
      - name: Tests
        shell: bash
        working-directory: rellic-build
        run: |
          # Test with CMake provided test
          env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test

      - name: Locate the packages
        id: package_names
        shell: bash
        working-directory: rellic-build
        run: |
          echo ::set-output name=TGZ_PACKAGE_PATH::rellic-build/$(ls *.tar.gz)

      - name: Store the TGZ package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}_llvm${{ matrix.llvm }}_tgz_package
          path: ${{ steps.package_names.outputs.TGZ_PACKAGE_PATH }}


  release_packages:
    # Do not run the release procedure if any of the builds has failed
    needs: [ build_linux, build_mac ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:
      - name: Adding github workspace as safe directory
        # See issue https://github.com/actions/checkout/issues/760
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - name: Clone the rellic repository
        uses: actions/checkout@v2
        with:
          path: rellic
          fetch-depth: 0
          submodules: true

      - name: Generate the changelog
        shell: bash
        working-directory: rellic
        run: |
          ./scripts/generate_changelog.sh changelog.md

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Draft the new release
        id: create_release
        uses: actions/create-release@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          body_path: rellic/changelog.md
          draft: true
          prerelease: true

      - name: Group the packages by platform
        run: |
          zip -r9 rellic_ubuntu-20.04_packages.zip \
                  ubuntu-20.04*

          zip -r9 rellic_macos-11_packages.zip \
                  macos-11*

      - name: Upload the Ubuntu 20.04 packages
        uses: actions/upload-release-asset@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: rellic_ubuntu-20.04_packages.zip
          asset_name: rellic_ubuntu-20.04_packages.zip
          asset_content_type: application/gzip

      - name: Upload the macOS 11 packages
        uses: actions/upload-release-asset@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: rellic_macos-11_packages.zip
          asset_name: rellic_macos-11_packages.zip
          asset_content_type: application/gzip

  Docker_Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        llvm: ["14"]
        ubuntu: ["20.04"]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Build LLVM ${{ matrix.llvm }} on ${{ matrix.ubuntu }}
      run: |
        docker build . -t docker.pkg.github.com/lifting-bits/rellic/rellic-llvm${{ matrix.llvm }}-ubuntu${{ matrix.ubuntu }}-amd64:latest -f Dockerfile --build-arg UBUNTU_VERSION=${{ matrix.ubuntu }} --build-arg ARCH=amd64 --build-arg LLVM_VERSION=${{ matrix.llvm }}
    - name: Test Docker image
      run: |
        docker run --rm docker.pkg.github.com/lifting-bits/rellic/rellic-llvm${{ matrix.llvm }}-ubuntu${{ matrix.ubuntu }}-amd64:latest --version
